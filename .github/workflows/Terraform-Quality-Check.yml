name: terraform-quality-check

on:
  pull_request:
    branches: [ '**' ]
    paths:
    - '*.tf'
    - '.terraform/**'
    - '.terraform.lock.hcl'

  workflow_dispatch:

jobs:

  terraform:

    name: Terraform Quality
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      # Install Terraform & Terraform Cloud on the job woker + authenticate with the CLOUD TOKEN
      - name: Install Terraform & Authenticate on Terraform Cloud
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.6
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
      
      # Check that main.tf is consistently formatted
      - name: Run 'terraform fmt'
        id: fmt
        run: terraform fmt -check
      
      # Init the .terraform.lock.hcl (contains init state for providers, resources, etc.)
      # Initialised on the 'cete-api-default' workspace. TF will switch the workspace when needed (ie applying) 
      - name: Run 'terraform init'
        id: init
        env:
          TF_WORKSPACE: cete-api-default
        run: |
          terraform init -upgrade
      
      # Check that main.tf is syntactically correct & indented 
      - name: Run 'terraform validate'
        id: validate
        run: terraform validate -no-color

      # Generate Terraform plan on PR events.
      # main.tf also defines a Cloud block, so this step triggers a remote plan run in Terraform Cloud 
      # When the PR is merged, 'terraform apply' will run
      # If the PR is to the 'staging' it will plan using the current staging state
      - name: Run 'terraform plan' (stg)
        if: ${{ github.base_ref == 'staging' }}
        id: planStg
        run: |
          terraform workspace select cete-stg-infra
          terraform plan -var="ENVIRONMENT="stg""
      # If the PR is to 'main', it will plan using the current prod state
      - name: Run 'terraform plan' (prd)
        if: ${{ github.base_ref == 'main' }}
        id: planPrd
        run: |
          terraform workspace select cete-prd-infra
          terraform plan -var="ENVIRONMENT="prd""
      
      # On PR events, comment on the PR with the terraform step statuses
      # The always() allows this step to run regardless of whether the steps above failed, as we want to see which stage failed
      - name: Update Pull Request With Terraform Quality Step Outputs
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request' && always()
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const output = `## Terraform Status Update 🤖
            #### This is an automated message generated by the Terraform-Quality-Check workflow run. It displays the statuses of the formatting, initialisation and validation of the Terraform source files.
            
            ### Code Quality 
            #### 🖌 Terraform Format and Style -> \`${{ steps.fmt.outcome }}\`
            #### ⚙️ Terraform Initialization -> \`${{ steps.init.outcome }}\`
            #### ✅ Terraform Validation -> \`${{ steps.validate.outcome }}\`

            ### Plan 
            #### 🟡 Terraform Plan (stg) -> \`${{ steps.planStg.outcome }}\`
            #### 🟢 Terraform Plan (prd) -> \`${{ steps.planPrd.outcome }}\`


            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })